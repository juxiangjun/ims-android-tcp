package com.eme.ims.codec;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.nio.charset.CharacterCodingException;import java.nio.charset.Charset;import java.nio.charset.CharsetDecoder;import java.nio.charset.CharsetEncoder;import org.apache.mina.core.buffer.IoBuffer;import com.eme.ims.utils.PropertyConfig;public enum MessageManager {		INSTANCE;	private CharsetEncoder encoder = Charset.forName("utf-8").newEncoder();	private CharsetDecoder decoder = Charset.forName("utf-8").newDecoder();				private static transient int DEFAULT_SIZE = 168;	 	public int getMessageSize(Message message) {		int messageSize = 0;		try {			byte[] contents = message.getContents();			if (null != contents && contents.length>0) {				//byte[] bytes = message.getContents().getBytes("UTF-8");				messageSize = contents.length;			}		} catch (Exception e) {			e.printStackTrace();		}		return DEFAULT_SIZE + messageSize;	}		public IoBuffer  getStreamBuffer(Message message, PropertyConfig config) throws CharacterCodingException{				boolean convertAudioToBinary = false;		int audioFileLength = 0;		byte[] audio = null;		//		if (message.getType() == MsgProtocol.MsgType.VOICE) {//			if (message.getDirection() == MsgProtocol.MsgDirection.CLIENT_TO_SERVER) {//				convertAudioToBinary = true;//				String path = config.getString("audio.folder");//				String fileName = message.getUid()+".aac";//				File file = new File(path+fileName);//				audioFileLength = (int) file.length();//				audio = new byte[audioFileLength];//				FileInputStream fis;//				try {//					fis = new FileInputStream(file);//					fis.read(audio);//				} catch (Exception e) {//					e.printStackTrace();//				}//			}//		}				int capacity = this.getMessageSize(message);				IoBuffer buffer = IoBuffer.allocate(capacity+4+audioFileLength);				buffer.putInt(capacity);				buffer.putString(message.getUid(), encoder);		buffer.putString(message.getFrom(), encoder);		buffer.putString(message.getTo(), encoder);		buffer.putString(message.getGroupId(), encoder);				buffer.putInt(message.getCommandId());		buffer.putInt(message.getType().intValue());		buffer.putInt(message.getError().intValue());		buffer.putInt(message.getStatus().intValue());		buffer.putInt(message.getDirection().intValue());				if (convertAudioToBinary) {			buffer.put(audio);		} else {			buffer.put(message.getContents());		}						return buffer;			}	    		public Message fromStream (IoBuffer buffer, int capacity, PropertyConfig config) throws CharacterCodingException {				Message message = new Message();				message.setUid(buffer.getString(36,decoder));		log("uid:["+message.getUid()+"]");				message.setFrom(buffer.getString(36, decoder));		log("from:["+message.getFrom()+"]");				message.setTo(buffer.getString(36, decoder));		log("to:["+message.getTo()+"]");				message.setGroupId(buffer.getString(36, decoder));		log("group Id:["+message.getGroupId()+"]");						message.setCommandId(buffer.getInt());		log("command id:" + message.getCommandId().intValue());				message.setType(Integer.valueOf(buffer.getInt()).shortValue());		log("type:["+message.getType()+"]");				message.setError(Integer.valueOf(buffer.getInt()).shortValue());		log("ErrorId:["+message.getError()+"]");				message.setStatus(Integer.valueOf(buffer.getInt()).shortValue());		log("status:["+message.getStatus()+"]");				message.setDirection(Integer.valueOf(buffer.getInt()).shortValue());		log("direction:["+message.getDirection()+"]");				if (message.getType() == MsgProtocol.MsgType.VOICE) {			log("u message type : voice");			if (message.getDirection() == MsgProtocol.MsgDirection.CLIENT_TO_SERVER) {				byte[] audio = new byte[capacity-164];				buffer.get(audio);				String path = config.getString("audio.folder");				String fileName = message.getUid()+".aac";				log("path=" + path); 			    try {			    	FileOutputStream fos = new FileOutputStream(path+fileName);	    			fos.write(audio, 0, audio.length);	    			fos.flush();	    			fos.close();	    			String url = "http://"+config.getString("server.host")+":8080/ims/audio/"+fileName;					message.setContents(url.getBytes());					log(fileName); 				} catch (IOException e) {					log("failed to save file to disk.");				}			} else {				message.setContents(buffer.getString(decoder).getBytes());				log("u message:["+new String(message.getContents())+"]");			}		} else {			if (capacity == 164) {							} else {				int size = capacity - 164;				byte[] tmp = new byte[size];				buffer.get(tmp);				message.setContents(tmp);			}			log("message:["+new String(message.getContents())+"]");		}		message.setEventTime(System.nanoTime());		return message;	}		private void log(String message) {		//System.out.println(message);	}	  }