package com.eme.ims.codec;import java.nio.charset.CharacterCodingException;import java.util.ArrayList;import java.util.List;import org.apache.mina.core.buffer.IoBuffer;import org.apache.mina.core.session.IoSession;import org.apache.mina.filter.codec.CumulativeProtocolDecoder;import org.apache.mina.filter.codec.ProtocolDecoderOutput;import com.eme.ims.utils.PropertyConfig;public class MessageDecoder  extends CumulativeProtocolDecoder{	private PropertyConfig config;			public MessageDecoder(PropertyConfig config) {		this.config = config;	}		private MessageManager messageManager = MessageManager.INSTANCE;		@Override	protected boolean doDecode(IoSession session, IoBuffer in,			ProtocolDecoderOutput out) throws Exception {		System.out.println("**********begin to decode....data size:"+in.remaining()+"*******");				boolean result = false;		if (in.remaining() >0) {			List<Message> messageList =  this.getMessageList(in);			out.write(messageList);			System.out.println("===========================size:***********"+messageList.size());		}		return result;	}		private Message getMessage(IoBuffer in, int capacity, PropertyConfig config) {		Message message = null;;		try {			message = this.messageManager.fromStream(in, capacity, config);		} catch (CharacterCodingException e) {			e.printStackTrace();		}		return message;	}		private List<Message> getMessageList(IoBuffer in) {		List<Message> messageList = new ArrayList<Message>();		in.mark();		int capacity = in.getInt()-4;				if (capacity>0 &&  in.remaining()>=capacity) {			System.out.println("has enough data to decode.["+capacity+"]");			messageList.add(this.getMessage(in, capacity, config));			while (in.remaining()>4) {				in.mark();				capacity = in.getInt()-4;				System.out.println("....=========msg capacity:"+capacity+"=======... remain:"+in.remaining());				if (capacity>0 &&  in.remaining()>=capacity) {					messageList.add(this.getMessage(in, capacity, config));				} else {					in.reset();					break;				}			}		} else {			in.reset() ;		}				return messageList;	}}